Aula #16 - Tuplas

Tuplas são variáveis que armazenam mais de um objeto. Elas são imutáveis e possuem meios para ser realizado fatiamento.

tupla = ('tupla1','tupla2', 'tupla3','tuplan')

    *Podem ser declaradas com ou sem parenteses, porém sempre são retornadas com os parentêses.

Tal como uma lista, pode ser utilizado como um parâmetro para as repetições for e while.

Podemos enumerar, somar e unir tuplas tal como:

    tupla = ('tupla1','tupla2')
    tupplaI = ('tupla3','tupla4')
    tuplasoma = ('tupla' + 'tuplaI')
    print(tuplasoma) => ('tupla1','tupla2','tupla3','tupla4')

O mesmo vale para index

Nós podemos apagar uma váriável com a função del
    del(tupla)

É importante, porém, frisar que tuplas não podem ser alteradas durante a execução do cód. apenas direto em sua composição dentro do script.


Aula#17 - Listas
As listas, assim como as Tuplas, são variáveis compostas porém com listas podemos alterar os seus valores, diferente do que ocorre com as tuplas. Para criar umas lista basta substituir os parenteses '()' utilizados nas tuplas por colchetes '[]'.

tupla = ('var1', 'var2', 'var3', 'var4', 'varN')
lista = ['var1', 'var2', 'var3', 'var4', 'varN']

Assim como em uma Tupla, nas listas podemos inserir mais valores, porém com a possibilidade de edição enquanto da execução.

Podemos usar a maioria das fincionalidades de fatiamento conhecidas e, também, aplicar novas funções como os módulos .append, .insert. 

    lista.append('newvalue') => aqui inserimos um valor na última posição conforme o módulo .append
    lista.insert(n, 'newvalue') => já aqui inserimos um novo valor na posição n da lista. e deslocamos os demais em suas respectivas direções.

Também podemos substituir um valor referenciando a lista e a posição onde queremos realizar a substituição. 

    lista[n] = 'newvalue' => aqui estamos alterando o n valor da lista.

Além disso podemos remover valores com as funções del, remove e pop.

    .pop - se sem parâmetro ele remove o último item. Se informar um parâmetro ele remove o valor daquela posição.
    .remove - remove o valor informado no parâmetro e elimina a primeira ocorrência daquele valor.

Também podemos criar uma lista com função list(), porém é pouco usual.

Aula #18 - Listas (parte 2)

Listas compostas.

Podemos criar listas dentro de outras listas, neste caso teremos uma lista composta.

    Ex. lista = [['João', 25], ['Pedro',32], ['Maria', 28], ['Felipe', 30]]

Nesse exemplo vemos uma lista com outras 4 listas dentro dela.

Podemos fazer uma cópia dos dados utilizando colchetes com apenas ':' (dois pontos) dentro:
    Ex. lista.append(dados[:])
    Isso é muito importante pois será imprescindível para diversças ações dentro de listas compostas.

Outra coisa dieferente é a forma de referenciar itens de listas compostas conforme abaixo:
    Ex lista[0][0] => tratase do item 0 da lista 0 = 'João'
        lista[1][1] => trata-se do item 1 da lista 1 = 32
        lista[2][0] => trata-se do item 0 da lista 2 = 'Maria'
        lista[3] => trata-se de toda a lista 3 = ['Felipe', 30]

Podemos, também limpar o conteúdo de uma lista com o mód .clear(). Esse módulo não leva argumento.

Aula#19 - Dicionários:

Dicionários são outro formato de estrutura composta caracterizado pelo uso de chaves '{}' como delimitadores. A função que cria um dicionário é dict(). Elas perimitem a associação de seus valores internos a partir de um nome, como nas váriáveis, porém mantendo alguns dos comportamentos de listas.
    Ex. dic = {'nome':'valor', 'nome2':'valor2'}

        Para nos referirmos à um item de um dicionário apenas colocamos a referência de seu nome, semelhante ao formato de lista:
            Ex. print(dic['nome']) >> valor

Possuem uma maneira diferente de serem referenciadas e cada elemento possui uma nomenclatura para que possamos ter interações mais simples com eles:
    Chaves (keys): são os nomes de cada valor.
    Valor (value): são os valores propriamente ditos.
    Item (item): é o conjunto key+value.

Podemos inserir itens em um dicionário apenas declarando-os, seja em uma substituição quanto em uma adição. No caso dos dicionários não é possivel o uso de .append()
    Ex. dic['nome3'] = 'valor3'

Podemos combinar os dicionários com tuplas e listas, tanto sendo um elemento de cada uma dessas estruturas como sendo portador das mesmas:
    lista = [dic{'nome':'valor'}]
    dic = {'nome': ['valor1', 'valor2']}
    dic = {'valor': ('valor1', 'valor2')}
    tupla = ({'nome':'valor','nome2':'valor2'})
        * Cuidado, tanto listas quanto tuplas mantém suas características então podem gerar bug's devido suas limitações.

Para se trabalhar com dicionários podemos usar todos os elementos vistos anteriormente porém com algumas exceções:
    * As funções de fatiamento [:] não são aplicáveis aos dicionários e nesse caso utilizamos a função .copy para realizar a cópia de alguma informação.
    * A maneira de ordená-los é diferente, neste caso podemos utilizar a função sorted(), por padrão ela realiza a ordenação pela inicial de cada key, então precisamos atibuir o parâmetro que será utilizado para realizar a ordenação. (a ordenação de dicionários é pouco usual, entretanto)
    * Eles podem, facilmente, ser alterados, porém cada item leva apenas um valor por padrão, para que se possa atribuir mais de um valor é necessário combinar uma lista ou tupla para tal.

Para remover elementos usamos a função del:
    del dados['nome']

Aula#21 - Listas (Parte2)

    Escopo de variáveis, docstrings, Interactive Help, Argumentos operacionais, retorno de resultados

Interactive Help
    É chamado a partir do método help(). Podemos também, imprimir o docinterno da função com a seguinte grafia print(function.__doc__).

Docstrings
    A docstring é a ducumentação referente à função relacionada. Usamos docstrings para documentar nossas próprias funções para facilitar a manutenção do cód por outras pessoas ou por nós mesmos. Para definirmos as docstrings basta abrir tres aspas duplas logo abaixo à chamada da função.

Parametros opcionais
    Podemos definir um valor padrão para uma variáevl dentro do escopo de uma função, de modo que, quando não houver a informação para aquela variável a função não irá "quebrar". Para tal basta atribuir um valor dentro do escopo da função quando for declarada. Ex: def soma(a=0, b=0, c=0).

Escopo de declarações
    Resume-se ao local e características de alocação de variáveis e/ou funções.
        Escopo Global: diz-se dos valores que estão contidos dentro do programa principal e, portanto, podem ser acessadas por todas as funções e elementos do programa.
        Escopo Local: diz-se de valores contidos dentro de módulos, subprogramas ou funções. Nesse caso somente funcionam dentro de seus respectivos locais.
            *No python, caso seja definida uma variável de igual nome de um global dentro de um local, será criada uma nova variável dentro do escopo local onde está contida.
            
Retorno de resultados
    É caracterizado pelo uso da palavra reservada 'return'. Nesse caso, a função, ao invés de imprimir ou executar uma ação, retornnará um valor que, nesse caso, pode ser utilizado dentro de outros escopos com maior flexibilidade.