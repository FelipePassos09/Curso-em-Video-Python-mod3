Aula #16 - Tuplas

Tuplas são variáveis que armazenam mais de um objeto. Elas são imutáveis e possuem meios para ser realizado fatiamento.

tupla = ('tupla1','tupla2', 'tupla3','tuplan')

    *Podem ser declaradas com ou sem parenteses, porém sempre são retornadas com os parentêses.

Tal como uma lista, pode ser utilizado como um parâmetro para as repetições for e while.

Podemos enumerar, somar e unir tuplas tal como:

    tupla = ('tupla1','tupla2')
    tupplaI = ('tupla3','tupla4')
    tuplasoma = ('tupla' + 'tuplaI')
    print(tuplasoma) => ('tupla1','tupla2','tupla3','tupla4')

O mesmo vale para index

Nós podemos apagar uma váriável com a função del
    del(tupla)

É importante, porém, frisar que tuplas não podem ser alteradas durante a execução do cód. apenas direto em sua composição dentro do script.


Aula#17 - Listas
As listas, assim como as Tuplas, são variáveis compostas porém com listas podemos alterar os seus valores, diferente do que ocorre com as tuplas. Para criar umas lista basta substituir os parenteses '()' utilizados nas tuplas por colchetes '[]'.

tupla = ('var1', 'var2', 'var3', 'var4', 'varN')
lista = ['var1', 'var2', 'var3', 'var4', 'varN']

Assim como em uma Tupla, nas listas podemos inserir mais valores, porém com a possibilidade de edição enquanto da execução.

Podemos usar a maioria das fincionalidades de fatiamento conhecidas e, também, aplicar novas funções como os módulos .append, .insert. 

    lista.append('newvalue') => aqui inserimos um valor na última posição conforme o módulo .append
    lista.insert(n, 'newvalue') => já aqui inserimos um novo valor na posição n da lista. e deslocamos os demais em suas respectivas direções.

Também podemos substituir um valor referenciando a lista e a posição onde queremos realizar a substituição. 

    lista[n] = 'newvalue' => aqui estamos alterando o n valor da lista.

Além disso podemos remover valores com as funções del, remove e pop.

    .pop - se sem parâmetro ele remove o último item. Se informar um parâmetro ele remove o valor daquela posição.
    .remove - remove o valor informado no parâmetro e elimina a primeira ocorrência daquele valor.

Também podemos criar uma lista com função list(), porém é pouco usual.

Aula #18 - Listas (parte 2)

Listas compostas.

Podemos criar listas dentro de outras listas, neste caso teremos uma lista composta.

    Ex. lista = [['João', 25], ['Pedro',32], ['Maria', 28], ['Felipe', 30]]

Nesse exemplo vemos uma lista com outras 4 listas dentro dela.

Podemos fazer uma cópia dos dados utilizando colchetes com apenas ':' (dois pontos) dentro:
    Ex. lista.append(dados[:])
    Isso é muito importante pois será imprescindível para diversças ações dentro de listas compostas.

Outra coisa dieferente é a forma de referenciar itens de listas compostas conforme abaixo:
    Ex lista[0][0] => tratase do item 0 da lista 0 = 'João'
        lista[1][1] => trata-se do item 1 da lista 1 = 32
        lista[2][0] => trata-se do item 0 da lista 2 = 'Maria'
        lista[3] => trata-se de toda a lista 3 = ['Felipe', 30]

Podemos, também limpar o conteúdo de uma lista com o mód .clear(). Esse módulo não leva argumento.

